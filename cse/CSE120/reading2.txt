David Wang
CSE 120

Reading Assignment # 2


1.) 

	Keeping the same programming conventions within a team is definitely important. 
Having conflicting programming conventions/methods can be detrimental to the progress 
of the team overall. If group members were to all use different coding styles, time and
resources would be wasted on figuring out each others' styles. Having the same programming 
conventions prevents potential misunderstandings and increases the efficiency of a team overall.

2.) 

	Our group is currently considering using Dart or Flutter, languages similar to Swift.
We believe that this will save us time in the long run since these languages can get more work
done with less code. It may take time to learn new languages, but it will benefit us in future
programming endeavors and save time overall with this project.

3.) 

	Amongst all the design practices listed in Chapter 5, I think that "Design is Emergent"
resonates with me the most. Throughout my experiences as a student, I find that I often overthink
in the planning phases of projects. This often leads to me overloading myself and losing confidence 
in projects before I've even started. Thus, I have learned that fear of imperfections or failures 
will only frustrate and complicate things, and that trying and building upon failures is the best way 
to learn and succeed. This design practice is one of my top priorities not only for
programming, but for any endeavor I take.

	The only practice I might disagree with is that of Portability. I feel that Portability is
situational. While working on our projects, we need to be able to design a working prototype before
we can worry about implementing cross platform support. For example, say a group is designing an app
for iOS. If the group hasn't finished their iOS prototype and is already focused on portability and
cross platform compatbility for Android or even Windows, they will have their attention split. The
first priority for any project should be to get a working prototype, designed for one platform.
Only then can they start to think of cross platform support.

4.)

	The most common ADTs I've used are Linked Lists and Queues. In my CSE 150 project for example,
we had to code a thread system for Nachos. Queues were the most efficient for emulating the way tasks
are queued up for operating systems. For my AI class right now, I recently solved a lab using ArrayLists
since one of the requirements was to be able to add objects to a list and also check if there were any
duplicates. ArrayLists were the easiest way to implement that requirement.
CSE 30 Homework 1

David Wang

1.)

a.)

2n - 100nlogn is of order: nlog(n)

	2n is O(n) and 100n * log n is nlog(n) so O(n) - nlog(n) is the larger magnitude, nlog(n).

10^1000 is of order: O(1) 

	10^1000 is a constant, so order is O(1)

2^log(n) is of order: O(2^n) 

	2^(log(n)) is just 2 to an exponential power, so it is O(2^n)

3n + 100log(n) is of order: O(n)

	O(n) is greater magnitude than O(log(n)) so whole thing is of order O(n).

8n is of order: O(n)

	linear equation

2^n is of order: O(2^n)

	exponential function

n^2 + 10n is of order: O(n^2)

	n^2 is greater magnitude than 10n so the whole thing is of order O(n^2)

n^3 is of order: O(n^k) polynomial

nlog(n^2) is of order: nlog(n)


b. Organizing in ascending order (slowest to fastest)

10^1000, 8n, 3n + 100log(n), 2n - 100nlogn, nlog(n^2), n^2 + 10n, n^3, 2^n, 2^log(n)

2.) 

a. The algorithm uses a single for loop, so the memory required would be O(n).

b. The innermost loop runs from i = 2 to n - 1 and increments by two each iteration of the loop. Thus, the function that represents
the number of iterations of the loop would be (n - 3)/2. 

c. The Big-O order of (n-3)/2 would be O(n).

d. The best and worse case are both O(n) since as n increases the function is still linear.

3.)

	1. calls PrintS(3, (), (a,b,c) 
	2. PrintS(3, (), (a,b,c) -> calls PrintS(2, a, bc), calls PrintS(2, b, ac), and PrintS(2, c, ab)
	3. PrintS(2, a, bc) -> calls PrintS(1, ab, c), and PrintS (1, ac, b). 
	   PrintS(2, b, ac) -> calls PrintS(1, ba, c) and PrintS(1, bc, a)
	   PrintS(2, c, ab) -> calls PrintS(1, ca, b) and PrintS(1, cb, a)
	4. PrintS(1, ab, c) outputs -> abc
	   PrintS(1, ac, b) outputs -> acb
	   PrintS(1, ba, c) outputs -> bac
	   PrintS(1, bc, a) outputs -> bca
	   PrintS(1, ca, b) outputs -> cab
	   PrintS(1, cb, a) outputs -> cba


4.)

bool isValidIdentifier (string s)
{
	if((string[0] >= 'a' && string[0] <= 'z') || string[0] == '_')) //checking if first element is letter or number
	{
		for(int i = 1; i < s.length(); i++) //checking if elements after first are numbers, letters, or "_"
		{
			 if(!((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= '0' && s[i] <= '9') || (s[i] == '_'))) 
			 {
				//if !(number, letter, or '_'). In other words, if anything is found that contradicts requirements for elements after first
				return false;
			 }
			 else
			 {
				return true;
			 }
		}
	}

	return false; //if first element does not satisfy requirements, return false
}

5.) 

a. a is passed by reference since C++ passes arrays through reference by default.
b. b is passed by reference
c. c is passed by value
d. There is no input value that can result in an output of 1.
e. 14





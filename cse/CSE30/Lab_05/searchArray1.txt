searchArray1 pseudo

checkArraySort(string* A, size)
{

	use code from checkArraySort.cpp	

}

binarySearchR(String* A, int first, int last, string key)
{

	int mid = (first + last)/2; //middle of array

	if(first > last) //to prevent infinite recursion. in ascending order, first should always be less than last.
	{
		return -1;
	}

	if(key == a[middle]) //if the target key is SAME as middle term
	{
		return middle; //key was found at middle
	}
	else if (key < a[middle]) //if key is less than middle
	{
		return binarySearch(A, first, middle - 1, key); //recursive call to start again from first to middle - 1 until key is found
		
		//if the key is found to be less than middle, then we can start searching from the
			start of array up to middle - 1, since we know the key isn't found above or at middle index
	}
	else 	// if (key > a[middle])
	{
		return binarySearch(A, middle + 1, last, key); //recursive call to start again from middle + 1 to end until key is found
		
		//if key is above middle, we can now narrow our search
			down from starting index of middle + 1 to end of array
	}
}

int main()
{
	code from checkArray (input array, check if sorted)
	
	sorted = checkArraySort();
	if(sorted == 1 || sorted == -1)
	{
		cout: Enter search key
		cin: key
		
		index = binarySearchR(A, 0 since its first element, size of A - 1, key to be searched); 
		if(index == -1)
		{
			cout: The key << key << was not found in the array!
		}
		else
		{
			cout: Found key << k << at index << index;
		}
	}
}
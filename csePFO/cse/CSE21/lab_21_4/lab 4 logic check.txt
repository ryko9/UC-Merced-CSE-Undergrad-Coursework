Lab 4 Logic Check:

Activity 6.6.2

1.) True
2.) True
3.) False
4.) False

Activity 6.7.3

1.) True
2.) False

Activity 6.10.11

1.) True
2.) False
3.) False
4.) True
5.) True

Activity 6.11.1

1.) 1
2.) 2
3.) 3
4.) 3
5.) False

Task 1) 

1.) visitorScores is moved to main so the information can be accessed and changed easily instead of having to keep it stored locally inside the methods.
2.) if visitorScores was inside initialize, its data would be local to only the initialize method.
3.) the information for the visitorScores array is now global and can be accessed by any method.
4.) it would still work, the initialize method has two int arrays as parameters and will work as long as an int array is passed through when calling the method.
However, the naming of the variables might be confusing if you pass in values for Home, Visitors in the order Visitors, Home.
5.) It would still work because the arguments passed through when calling the initialize method are int arrays, and the parameters are also int arrays.
6.) it would not work because the arguments in the method call dont match the paramters of double.

Task 2)

7.) int batter = VISITORS;  // 1 is visitor, 2 is home
        int inning = 1;
        
        while (!gameIsOver(inning, batter, visitorScores, homeScores)) 
        {
            
            if(batter == VISITORS)
            {

                visitorScores[inning - 1] = scores.nextInt();    
                batter = HOME;
            
            }
            
            else
            {
                
                homeScores[inning - 1] = scores.nextInt();
                
                batter = VISITORS;
                inning++;
            }
        }

Task 3)

8.) 4 tests are given
9.) 	assertEquals (0, ScorerCombo.gameScore(testScore));
		testScore[0] = -10;
		assertEquals (-10, ScorerCombo.gameScore(testScore));
		testScore[0] = -10 * 20;
		assertEquals (-200, ScorerCombo.gameScore(testScore));
		testScore[0] = -999; //sentinel
		assertEquals (0, ScorerCombo.gameScore(testScore));

I made a new array called testScore so I could have a fresh array to test. I used the tests to make sure
that negative besides SENTINEL or -999 were recognized. Then, I finished off by making sure that if I were to set
the only value in the array to -999 that the value would be considered 0 since it is SENTINEL.

Task 4) 

11.) Version 1 prints out the box score of visitorScore and homeScore
12.) Version 2 prints out box score without team names.
13.) Calls the method for version 2 and allows you to choose a name for the team.
14.) version 2 is called
15.) version 3 gets the return value from version 2.

Task 5.)

16.) return result(inning, visitorScore, homeScore);
17.) gameIsOver checks the condition, so batter is not needed in the result method.
18.)	        visitors2[0] = 3;
		home1[0] = 2;
		assertEquals ("The visiting team won 3 to 2 in 3 innings.", ScorerCombo.result (ScorerCombo.innings(visitors2), ScorerCombo.gameScore(visitors2), ScorerCombo.gameScore(home1)));
		visitors2[0] = 4;
		home1[0] = 6;
		assertEquals ("The home team won 6 to 4 in 3 innings.", ScorerCombo.result (ScorerCombo.innings(visitors2), ScorerCombo.gameScore(visitors2), ScorerCombo.gameScore(home1)));
		home1[0] = 10;
		assertEquals ("The home team won 10 to 4 in 3 innings.", ScorerCombo.result (ScorerCombo.innings(visitors2), ScorerCombo.gameScore(visitors2), ScorerCombo.gameScore(home1)));

I switched the values around for the first values of each array and tested to see if the results changed accordingly if values were switched and one team were to have more than another.

Task 6.) assertEquals ("inning 8, batter 1, tied", false, ScorerCombo.gameIsOver (8, 1, visitors1, home1));
		assertEquals ("inning 8, batter 1, visitors", false, ScorerCombo.gameIsOver (8, 1, visitors2, home1));
		assertEquals ("inning 8, batter 1, home", false, ScorerCombo.gameIsOver (8, 1, visitors1, home2));

Tested to see if the conditions applied properly using given scenarios.

19.) It checks all the conditions that define a game as "over". We know this because all the
previous labs have relied on this method to determine whether or not a game was over or not
as well. 
20.) 

Task 7.)
21.) String answer = input.next(); is taking a String answer from the user.
22.) If a lowercase y is entered by the user assuming that it will work and the code only accepts
an uppercase Y, then the y will be counted as a "no" answer. Vice versa can also happen so it would be best
to design the code for both 'y' and 'Y'
courseInfo pseudo


struct Time
{
	copy from timeInput.cpp
}

struct Course
{
	string name;
	int credits;
	bool majorRequirement;
	double avgGrade;
	string days;
	Time startTime;
	Time endTime;
}

boolGetTimeFromUser(Time &time, string input) //sets time struct elements. additional parameter of string since we are getting the input from text file.
{
	copy from timeInput.cpp
}

void print24Hour(Time &time) //prints out time
{
	copy from timeInput.cpp
}

int main()
{

	int size = 0; //size of string array
	int j; //used later to go through string array
	string line; //arbitrary string to go through first line of file.	

	//go through file contents
	ifstream input;

	input.open("words_in.txt"); //file name
	assert(!input.fail()); //address validation

	string firstLine; //getting first line of file
	input >> firstLine; 

	int numCourses = atoi(firstLine.c_str()); //converting first line into int that represents number of courses

	while(!input.eof()) //putting contents of array into dynamic array of strings 
	{
		input >> line;
		size++;
	}

	string lines[size]; //string array to store each line of the array.

	input.close(); //reopening file
	input.open();
	input >> line; //going past first line of file since we already know the number of courses. the other elements are what we need to store now

	for(int i = 0; i < size; i++) //inputting lines from file into array
        {
                getLine(input, lines[i]); //inputting line (0+i) into element i of array
        }
        input.close(); //close input
	

	Course courses[numCourses]; //creates time array with number of elements based on FIRST line in text which should represent # of courses

	for(int i = 0; i < numCourses; i++) //assigning values to elements in course array
	{
		//j represents index of string array. every time we want the next line, we will just increment j by 1 without resetting its value
	
		courses[i].name = lines[j];
		j++;
		courses[i].credits = atoi(lines[j].c_str());
		j++;
		if(atoi(lines[j].c_str()) == 1)
		{
			courses[i].majorRequirement = true;
		}
		else
		{
			courses[i].majorRequirement = false;
		} 
		j++;
		courses[i].avgGrade = atof(lines[j].c_str());
		j++;
		courses[i].days = lines[j];
		j++;
		courses[i].input(courses[i].startTime, lines[j]);
		j++;
		courses[i].input(courses[i].endTime, lines[j]);
		j++;
	}

	//print contents;
}